@@ -1,33 +1,29 @@
 const std = @import("std");
 const stdout = std.fs.File.stdout();

 pub fn main() !void {
     const args = try std.process.argsAlloc(std.heap.page_allocator);
     defer std.process.argsFree(std.heap.page_allocator, args);

     if (args.len < 3) {
         try stdout.writeAll("Usage: ./your_program.sh tokenize <filename>\n");
         std.process.exit(1);
     }

     const command = args[1];
     const filename = args[2];

     if (!std.mem.eql(u8, command, "tokenize")) {
         try stdout.writeAll("Unknown command: {s}\n");
         std.process.exit(1);
     }

     const file_contents = try std.fs.cwd().readFileAlloc(std.heap.page_allocator, filename, std.math.maxInt(usize));
     defer std.heap.page_allocator.free(file_contents);

-    // You can use print statements as follows for debugging, they'll be visible when running tests.
-    try stdout.writeAll("Logs from your program will appear here!\n");
-
-    // Uncomment this block to pass the first stage
-    // if (file_contents.len > 0) {
-    //     @panic("Scanner not implemented");
-    // } else {
-    //     try stdout.writeAll("EOF  null\n"); // Placeholder, replace this line when implementing the scanner
-    // }
+    if (file_contents.len > 0) {
+        @panic("Scanner not implemented");
+    } else {
+        try stdout.writeAll("EOF  null\n"); // Placeholder, replace this line when implementing the scanner
+    }
 }
